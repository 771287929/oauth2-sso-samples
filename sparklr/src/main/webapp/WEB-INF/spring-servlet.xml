<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<context:property-placeholder location="classpath:/keyhole.properties" />

	<!-- The OAuth2 protected resources are separated out into their own block 
		so we can deal with authorization and error handling separately. This isn't 
		mandatory, but it makes it easier to control the behaviour. -->
	<http pattern="/photos/**" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/photos" access="ROLE_USER,SCOPE_READ" />
		<intercept-url pattern="/photos/trusted/**" access="ROLE_CLIENT,SCOPE_TRUST" />
		<intercept-url pattern="/photos/user/**" access="ROLE_USER,SCOPE_TRUST" />
		<intercept-url pattern="/photos/**" access="ROLE_USER,SCOPE_READ" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http access-denied-page="/login.jsp?authorization_error=true"
		entry-point-ref="loginUrlAuthenticationEntryPoint"
		disable-url-rewriting="true"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="ROLE_USER" />
		<anonymous />
		<custom-filter ref="oauth2ClientFilter"	 before="PRE_AUTH_FILTER" />
		<custom-filter ref="oauth2SingleSignOnFilter" position="PRE_AUTH_FILTER" />
	</http>

	<!--apply the oauth client context -->
	<oauth:client id="oauth2ClientFilter" />
	
	<!-- single sign on filter -->
	<bean id="clientTokenServices" class="org.springframework.security.oauth2.sso.provider.token.LocalClientTokenServices">
		<property name="tokenStore" ref="tokenStore"/>
	</bean>
	
	<import resource="classpath:spring/oauth2-sso-filter.xml" />

	<bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
 		<property name="loginFormUrl" value="${loginFormUri}"/>
 	</bean>
 	
	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="sparklr2" />
	</bean>
	 	
 	<bean id="http403ForbiddenEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security"/>

	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<bean id="tokenEnhancer"
		class="org.springframework.security.oauth.examples.sparklr.oauth.SparklrTokenEnhancer" />

	<!-- resource server definitions -->
	<import resource="classpath:/spring/oauth2-resources.xml" />

	<bean id="remoteTokenServices"
		class="org.springframework.security.oauth2.sso.provider.token.RemoteResourceServerTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="resource" ref="sparklr" />
		<property name="userInfoUri" value="${userInfoUri}" />
		<property name="jwtTokenServices">
			<bean class="org.springframework.security.oauth2.sso.provider.token.JwtTokenConverter">
				<property name="signingKey" value="${jwtSigningKey}" />
			</bean>
		</property>
	</bean>

	<oauth:resource-server id="resourceServerFilter" resource-id="sparklr" token-services-ref="remoteTokenServices" />

	<mvc:annotation-driven />

	<mvc:default-servlet-handler />

	<sec:global-method-security
		pre-post-annotations="enabled" proxy-target-class="true">
		<!--you could also wire in the expression handler up at the layer of the 
			http filters. See https://jira.springsource.org/browse/SEC-1452 -->
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />

	<!--Basic application beans. -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="viewResolvers">
			<bean
				class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<property name="prefix" value="/WEB-INF/jsp/"></property>
				<property name="suffix" value=".jsp"></property>
			</bean>
		</property>
		<property name="defaultViews">
			<bean
				class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
				<property name="extractValueFromSingleKeyModel" value="true" />
			</bean>
		</property>
	</bean>

	<bean id="photoController"
		class="org.springframework.security.oauth.examples.sparklr.mvc.PhotoController">
		<property name="photoService" ref="photoServices" />
	</bean>

	<bean id="photoServices"
		class="org.springframework.security.oauth.examples.sparklr.impl.PhotoServiceImpl">
		<property name="photos">
			<list>
				<bean
					class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
					<property name="id" value="1" />
					<property name="name" value="photo1.jpg" />
					<property name="userId" value="marissa" />
					<property name="resourceURL"
						value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo1.jpg" />
				</bean>
				<bean
					class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
					<property name="id" value="2" />
					<property name="name" value="photo2.jpg" />
					<property name="userId" value="paul" />
					<property name="resourceURL"
						value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo2.jpg" />
				</bean>
				<bean
					class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
					<property name="id" value="3" />
					<property name="name" value="photo3.jpg" />
					<property name="userId" value="marissa" />
					<property name="resourceURL"
						value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo3.jpg" />
				</bean>
				<bean
					class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
					<property name="id" value="4" />
					<property name="name" value="photo4.jpg" />
					<property name="userId" value="paul" />
					<property name="resourceURL"
						value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo4.jpg" />
				</bean>
				<bean
					class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
					<property name="id" value="5" />
					<property name="name" value="photo5.jpg" />
					<property name="userId" value="marissa" />
					<property name="resourceURL"
						value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo5.jpg" />
				</bean>
				<bean
					class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">
					<property name="id" value="6" />
					<property name="name" value="photo6.jpg" />
					<property name="userId" value="paul" />
					<property name="resourceURL"
						value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo6.jpg" />
				</bean>
			</list>
		</property>
	</bean>

</beans>
